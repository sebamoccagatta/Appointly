// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Credentials Credentials?
}

model Credentials {
  userId       String     @unique
  email        String     @unique
  passwordHash String
  status       CredStatus
  user         User       @relation(fields: [userId], references: [id])

  @@index([email])
}

enum UserRole {
  ADMIN
  USER
  ASSISTANT
}

enum CredStatus {
  ACTIVE
  BLOCKED
}

model Offering {
  id              String         @id @default(uuid())
  name            String
  durationMinutes Int
  status          OfferingStatus @default(ACTIVE)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([status])
}

enum OfferingStatus {
  ACTIVE
  INACTIVE
}

model Schedule {
  id             String   @id @default(uuid())
  professionalId String
  timezone       String
  bufferMinutes  Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  WeeklyTemplate ScheduleWeeklyTemplate[]
  Exceptions     ScheduleException[]

  @@index([professionalId])
}

model ScheduleWeeklyTemplate {
  id         String @id @default(uuid())
  scheduleId String
  weekday    Int // 0-6
  start      String // "09:00"
  end        String // "18:00"

  schedule Schedule @relation(fields: [scheduleId], references: [id])
}

model ScheduleException {
  id         String   @id @default(uuid())
  scheduleId String
  date       DateTime
  available  Boolean
  start      String?
  end        String?

  schedule Schedule @relation(fields: [scheduleId], references: [id])
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model Appointment {
  id             String            @id @default(uuid())
  scheduleId     String
  offeringId     String
  professionalId String
  customerId     String
  start          DateTime
  end            DateTime
  status         AppointmentStatus @default(PENDING)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  @@index([scheduleId, start, end])
  @@index([professionalId])
  @@index([offeringId])
}
